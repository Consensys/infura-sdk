/* eslint-disable */
export const ERROR_MESSAGE = {
  invalid_auth_instance: 'Invalid Auth instance.',

  no_parameters_supplied: 'No parameters supplied.',
  no_template_type_supplied: 'No template type supplied.',
  no_tokenId_supplied: 'No tokenId supplied.',
  no_tokenURI_supplied: 'No tokenURI supplied.',
  no_projectId_supplied: 'No project id supplied.',
  no_secretId_supplied: 'No secret id supplied.',
  no_chainId_supplied: 'No chain id supplied.',
  no_signer_instance_supplied: 'No signer instance supplied.',
  no_name_supplied: 'No name supplied.',
  no_symbol_supplied: 'No symbol supplied.',
  no_contractURI_supplied: 'No contractURI supplied.',
  no_address_supplied: 'No address supplied.',
  no_sell_price_supplied: 'No sell price supplied.',
  no_to_address: 'No to address.',
  no_rpcURL: 'No rpcURL.',
  no_privateKey: 'No privateKey.',

  invalid_contract_address: 'Invalid contract address.',
  invalid_account_address: 'Invalid account address.',
  invalid_public_address: 'Invalid public address.',
  invalid_from_address: 'Invalid from address.',
  invalid_to_address: 'Invalid to address.',
  invalid_contractURI: 'Invalid contractURI.',
  invalid_template: 'Invalid template.',
  invalid_transaction_hash: 'Invalid transaction hash.',

  contract_already_deployed: 'Contract already deployed.',
  contract_already_loaded: 'Contract already loaded.',
  contract_not_deployed: 'Contract not deployed.',
  contract_not_deployed_or_loaded: 'Contract not deployed or loaded.',

  fee_must_be_between_0_and_10000: 'Fee must be between 0 and 10000.',

  tokenId_must_be_integer: 'TokenId must be integer.',
  approvalStatus_must_be_boolean: 'approvalStatus must be boolean.',
  only_privateKey_or_provider_required: 'Only privateKey or provider required',
  chain_not_supported: 'Chain not supported.',
  an_error_occured: 'An error occured',
};

export const ERROR_LOCATION = {
  SDK_constructor: '[SDK.constructor]',
  SDK_deploy: '[SDK.deploy]',
  SDK_loadContract: '[SDK.loadContract]',
  SDK_getContractMetadata: '[SDK.getContractMetadata]',
  SDK_getNFTs: '[SDK.getNFTs]',
  SDK_getNFTsForCollection: '[SDK.getNFTsForCollection]',
  SDK_getTokenMetadata: '[SDK.getTokenMetadata]',
  SDK_getStatus: '[SDK.GetStatus]',
  Auth_constructor: '[Auth.constructor]',
  ERC721Mintable_deploy: '[ERC721Mintable.deploy]',
  ERC721Mintable_setRoyalties: '[ERC721Mintable.setRoyalties]',
  ERC721Mintable_royaltyInfo: '[ERC721Mintable.royaltyInfo]',
  ERC721Mintable_mint: '[ERC721Mintable.mint]',
  ERC721Mintable_addMinter: '[ERC721Mintable.addMinter]',
  ERC721Mintable_renounceMinter: '[ERC721Mintable.renounceMinter]',
  ERC721Mintable_removeMinter: '[ERC721Mintable.removeMinter]',
  ERC721Mintable_isMinter: '[ERC721Mintable.isMinter]',
  ERC721Mintable_loadContract: '[ERC721Mintable.loadContract]',
  ERC721Mintable_transfer: '[ERC721Mintable.transfer]',
  ERC721Mintable_setContractURI: '[ERC721Mintable.setContractURI]',
  ERC721Mintable_addAdmin: '[ERC721Mintable.addAdmin]',
  ERC721Mintable_removeAdmin: '[ERC721Mintable.removeAdmin]',
  ERC721Mintable_renounceAdmin: '[ERC721Mintable.renounceAdmin]',
  ERC721Mintable_isAdmin: '[ERC721Mintable.isAdmin]',
  ERC721Mintable_setApprovalForAll: '[ERC721Mintable.setApprovalForAll]',
  ERC721Mintable_approveTransfer: '[ERC721Mintable.approveTransfer]',
  ERC721Mintable_renounceOwnership: '[ERC721Mintable.renounceOwnership]',
};
