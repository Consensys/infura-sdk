/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface Paths {
  '/networks/{chainId}/nfts/transfers': {
    /** Gets transfers from a block to block. */
    get: Operations['NftsController_getTransfersfromBlockToBlock'];
  };
  '/networks/{chainId}/nfts/block/transfers': {
    /** Gets transfers by block number or block hash. */
    get: Operations['NftsController_getTransfersByBlockNumberOrHash'];
  };
  '/networks/{chainId}/nfts/search': {
    /** Search for Nfts given a string */
    get: Operations['NftsController_searchNfts'];
  };
  '/networks/{chainId}/nfts/{tokenAddress}': {
    /** Gets the contract level metadata for a given contract address. */
    get: Operations['NftsController_getCollectionMetadata'];
  };
  '/networks/{chainId}/nfts/{tokenAddress}/tokens': {
    /** Gets all NFTs for a given contract address (including metadata). */
    get: Operations['NftsController_getNftsForCollection'];
  };
  '/networks/{chainId}/accounts/{walletAddress}/assets/collections': {
    /** Gets NFT collections owned by a given wallet address. */
    get: Operations['NftsController_getCollectionsByWalletAddress'];
  };
  '/networks/{chainId}/accounts/{walletAddress}/assets/nfts': {
    /** Gets all NFTs owned by a given wallet address. */
    get: Operations['NftsController_getNftsForAddress'];
  };
  '/networks/{chainId}/nfts/{tokenAddress}/tokens/{tokenId}': {
    /** Gets NFT data for the given NFT token ID and contract address. */
    get: Operations['NftsController_getNftMetadata'];
  };
  '/networks/{chainId}/accounts/{walletAddress}/assets/transfers': {
    /** Gets transfers of NFTs for a given wallet address */
    get: Operations['NftsController_getTransferForAddress'];
  };
  '/networks/{chainId}/nfts/{tokenAddress}/tokens/{tokenId}/transfers': {
    /** Gets transfers of an NFT by contract address and token ID. */
    get: Operations['NftsController_getTransfersByTokenId'];
  };
  '/networks/{chainId}/nfts/{tokenAddress}/transfers': {
    /** Gets transfers by contract address. */
    get: Operations['NftsController_getTransfersByTokenAddress'];
  };
  '/networks/{chainId}/nfts/{tokenAddress}/owners': {
    /** Gets NFT owners given a token address */
    get: Operations['NftsController_getOwnersByContract'];
  };
  '/networks/{chainId}/nfts/{tokenAddress}/{tokenId}/owners': {
    /** Gets NFT owners for a specific token address and a tokenId */
    get: Operations['NftsController_getOwnersByTokenId'];
  };
  '/networks/{chainId}/nfts/{tokenAddress}/tradePrice': {
    /** Get the lowest ETH based price for a scpecific token address */
    get: Operations['NftsController_getTradePrice'];
  };
}

export interface Components {
  schemas: {
    TransfersResultsModel: {
      /** @example 0x082903f4e94c5e10a2b116a4284940a36afaed63 */
      tokenAddress: string;
      /** @example 3784 */
      tokenId: string;
      /** @example 0x4f3a17060f14a28a1b706be652879d9aea4a83c2 */
      fromAddress: string;
      /** @example 0x0a267cf51ef038fc00e71801f5a524aec06e4f07 */
      toAddress: string;
      /** @example ERC1155 */
      contractType: string;
      /** @example 0 */
      price: string;
      /** @example 1 */
      quantity: string;
      /** @example 14221791 */
      blockNumber: string;
      /** @example 2022-02-17T05:37:06.000Z */
      blockTimestamp: string;
      /** @example 0x75cf7d327e259b10881cc3b66a4aad56eb2ab4163cc77a6c535123938aa87b5f */
      blockHash: string;
      /** @example 0x97af3d5fe2951a3667dc9b465eb7253682e08d7ec23759722db1732fa9583468 */
      transactionHash: string;
      /** @example */
      transactionType: string;
    };
    TransfersModel: {
      /** @example 1 */
      total: number;
      /** @example 1 */
      pageNumber: number;
      /** @example 100 */
      pageSize: number;
      /**
       * @example ETHEREUM
       * @enum {string}
       */
      network:
        | 'ETHEREUM'
        | 'GOERLI'
        | 'SEPOLIA'
        | 'BSC'
        | 'POLYGON'
        | 'MUMBAI'
        | 'BSC TESTNET'
        | 'AVALANCHE'
        | 'AVALANCHE TESTNET'
        | 'FANTOM'
        | 'CRONOS'
        | 'CRONOS TESTNET'
        | 'PALM'
        | 'ARBITRUM';
      cursor: string;
      transfers: Components['schemas']['TransfersResultsModel'][];
    };
    SearchNftResult: {
      /** @example 3784 */
      tokenId: string;
      /** @example 0x082903f4e94c5e10a2b116a4284940a36afaed63 */
      tokenAddress: string;
      /** @example {"image":"ipfs://QmQTquMHyYcBaXCS7bZccESzF2CoACtox9TmhRq38XJ6ey","attributes":[{"trait_type":"Eyes","value":"Sunglasses"},{"trait_type":"Background","value":"Aquamarine"},{"trait_type":"Hat","value":"Seaman's Hat"},{"trait_type":"Mouth","value":"Rage"},{"trait_type":"Fur","value":"Pink"},{"trait_type":"Clothes","value":"Bandolier"}]} */
      metadata: string;
      /** @example ERC1155 */
      contractType: string;
      /** @example 003d3b164bf215e95871a094416622d2 */
      tokenHash: string;
      /** @example 0x3b66c992860abd1ec94b917e222dca78ad55032f */
      minterAddress: string;
      /** @example 12347180 */
      blockNumberMinted: string;
      /** @example 0x3b2da3a735babcb4fa12ca2f5f1a799f2344ce9042ea03716e554502c65aea0e */
      transactionMinted: string;
      /** @example 2017-12-04T09:14:19.000Z */
      createdAt: string;
    };
    SearchNftModel: {
      /** @example 1 */
      total: number;
      /** @example 1 */
      pageNumber: number;
      /** @example 100 */
      pageSize: number;
      /**
       * @example ETHEREUM
       * @enum {string}
       */
      network:
        | 'ETHEREUM'
        | 'GOERLI'
        | 'SEPOLIA'
        | 'BSC'
        | 'POLYGON'
        | 'MUMBAI'
        | 'BSC TESTNET'
        | 'AVALANCHE'
        | 'AVALANCHE TESTNET'
        | 'FANTOM'
        | 'CRONOS'
        | 'CRONOS TESTNET'
        | 'PALM'
        | 'ARBITRUM';
      cursor: string;
      nfts: Components['schemas']['SearchNftResult'][];
    };
    CollectionModel: {
      /** @example 0xa9cb55d05d3351dcd02dd5dc4614e764ce3e1d6e */
      contract: string;
      /** @example My Crypto NFT Project */
      name: string;
      /** @example CNSYS */
      symbol: string;
      /** @example ERC721 */
      tokenType: string;
    };
    AssetsModel: {
      /** @example 0x8e04b34166612e73e8f8b7d7a5ddb6ea2895b4b5 */
      contract: string;
      /** @example 3545 */
      tokenId: string;
      /** @example 1 */
      supply: string;
      /** @example ERC721 */
      type: string;
      metadata?: { [key: string]: unknown };
    };
    NftModel: {
      /** @example 1 */
      pageNumber: number;
      /** @example 100 */
      pageSize: number;
      /**
       * @example ETHEREUM
       * @enum {string}
       */
      network:
        | 'ETHEREUM'
        | 'GOERLI'
        | 'SEPOLIA'
        | 'BSC'
        | 'POLYGON'
        | 'MUMBAI'
        | 'BSC TESTNET'
        | 'AVALANCHE'
        | 'AVALANCHE TESTNET'
        | 'FANTOM'
        | 'CRONOS'
        | 'CRONOS TESTNET'
        | 'PALM'
        | 'ARBITRUM';
      /** @example 1 */
      total: number;
      /** @example 0x0a267cf51ef038fc00e71801f5a524aec06e4f07 */
      account: string;
      cursor: string;
      assets: Components['schemas']['AssetsModel'][];
    };
    CollectionByWalletModel: {
      /** @example 1 */
      pageNumber: number;
      /** @example 100 */
      pageSize: number;
      /**
       * @example ETHEREUM
       * @enum {string}
       */
      network:
        | 'ETHEREUM'
        | 'GOERLI'
        | 'SEPOLIA'
        | 'BSC'
        | 'POLYGON'
        | 'MUMBAI'
        | 'BSC TESTNET'
        | 'AVALANCHE'
        | 'AVALANCHE TESTNET'
        | 'FANTOM'
        | 'CRONOS'
        | 'CRONOS TESTNET'
        | 'PALM'
        | 'ARBITRUM';
      cursor: string;
      /** @example 1 */
      total: number;
      /** @example 0x0a267cf51ef038fc00e71801f5a524aec06e4f07 */
      account: string;
      collections: Components['schemas']['CollectionModel'][];
    };
    MetadataModel: {
      /** @example 0xa9cb55d05d3351dcd02dd5dc4614e764ce3e1d6e */
      contract: string;
      /** @example 1 */
      tokenId: string;
      /**
       * @example {
       *   "name": "Washington #7421",
       *   "description": "WeMint Cash First Edition: Washington #7421",
       *   "attributes": []
       * }
       */
      metadata: { [key: string]: unknown };
    };
    OwnersResultModel: {
      /** @example 0x082903f4e94c5e10a2b116a4284940a36afaed63 */
      tokenAddress: string;
      /** @example 3784 */
      tokenId: string;
      /** @example 1 */
      amount: string;
      /** @example 0x8252df1d8b29057d1afe3062bf5a64d503152bc8 */
      ownerOf: string;
      /** @example 003d3b164bf215e95871a094416622d2 */
      tokenHash: string;
      /** @example 12347180 */
      blockNumberMinted: string;
      /** @example 15839662 */
      blockNumber: string;
      /** @example ERC1155 */
      contractType: string;
      /** @example BoredApeYachtClub */
      name: string;
      /** @example BAYC */
      symbol: string;
      /** @example {"image":"ipfs://QmQTquMHyYcBaXCS7bZccESzF2CoACtox9TmhRq38XJ6ey","attributes":[{"trait_type":"Eyes","value":"Sunglasses"},{"trait_type":"Background","value":"Aquamarine"},{"trait_type":"Hat","value":"Seaman's Hat"},{"trait_type":"Mouth","value":"Rage"},{"trait_type":"Fur","value":"Pink"},{"trait_type":"Clothes","value":"Bandolier"}]} */
      metadata: string;
      /** @example 0x3b66c992860abd1ec94b917e222dca78ad55032f */
      minterAddress: string;
    };
    OwnersModel: {
      /** @example 1 */
      total: number;
      /** @example 1 */
      pageNumber: number;
      /** @example 100 */
      pageSize: number;
      /**
       * @example ETHEREUM
       * @enum {string}
       */
      network:
        | 'ETHEREUM'
        | 'GOERLI'
        | 'SEPOLIA'
        | 'BSC'
        | 'POLYGON'
        | 'MUMBAI'
        | 'BSC TESTNET'
        | 'AVALANCHE'
        | 'AVALANCHE TESTNET'
        | 'FANTOM'
        | 'CRONOS'
        | 'CRONOS TESTNET'
        | 'PALM'
        | 'ARBITRUM';
      cursor: string;
      owners: Components['schemas']['OwnersResultModel'][];
    };
    TradePriceModel: {
      /** @example 0x0c930abb13c9b283bf73cdb979c8cb936bdf6189177d6f95beb892f66dc817fc */
      transactionHash: string;
      /** @example 2022-11-01T02:46:23.000Z */
      blockTimestamp: string;
      /** @example 0x002096fc3b09e3b3c00fdb1d5c08cf20b442e5a99d15bdedc73ba3a2558ea132 */
      blockHash: string;
      /** @example 15872306 */
      blockNumber: string;
      /**
       * @example [
       *   "7567"
       * ]
       */
      tokenIds: string[];
      /** @example 0xd279e2dd092835061fc6758d051bd78873ec7622 */
      sellerAddress: string;
      /** @example 0x00000003dff73965674dbcc9dfcec53e1789ed50 */
      buyerAddress: string;
      /** @example 0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d */
      tokenAddress: string;
      /** @example 0x00000000006c3852cbef3e08e8df289169ede581 */
      marketplaceAddress: string;
      /** @example 68100000000000000000 */
      price: string;
    };
  };
}

export interface Operations {
  /** Gets transfers from a block to block. */
  NftsController_getTransfersfromBlockToBlock: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
      };
      query: {
        /** The minimum block number to get transfers from */
        fromBlock: number;
        /** The maximum block number to get transfers from */
        toBlock: number;
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransfersModel'];
        };
      };
    };
  };
  /** Gets transfers by block number or block hash. */
  NftsController_getTransfersByBlockNumberOrHash: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
      };
      query: {
        /** The block hash or block number to get transfers from */
        blockHashNumber: string;
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransfersModel'];
        };
      };
    };
  };
  /** Search for Nfts given a string */
  NftsController_searchNfts: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
      };
      query: {
        /** The string query to search */
        query: string;
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['SearchNftModel'];
        };
      };
    };
  };
  /** Gets the contract level metadata for a given contract address. */
  NftsController_getCollectionMetadata: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The contract address of the NFT collection */
        tokenAddress: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['CollectionModel'];
        };
      };
    };
  };
  /** Gets all NFTs for a given contract address (including metadata). */
  NftsController_getNftsForCollection: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The contract address of the NFT collection */
        tokenAddress: string;
      };
      query: {
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
        /** A boolean to force clear the cache */
        resync?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['NftModel'];
        };
      };
    };
  };
  /** Gets NFT collections owned by a given wallet address. */
  NftsController_getCollectionsByWalletAddress: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The wallet address of the owner of the NFTs */
        walletAddress: string;
      };
      query: {
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['CollectionByWalletModel'];
        };
      };
    };
  };
  /** Gets all NFTs owned by a given wallet address. */
  NftsController_getNftsForAddress: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The wallet address of the owner of the NFTs */
        walletAddress: string;
      };
      query: {
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['NftModel'];
        };
      };
    };
  };
  /** Gets NFT data for the given NFT token ID and contract address. */
  NftsController_getNftMetadata: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The contract address of the NFT collection */
        tokenAddress: string;
        /** The token id to get metadata for */
        tokenId: string;
      };
      query: {
        /** A boolean to force resync the token's metadata */
        resyncMetadata?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['MetadataModel'];
        };
      };
    };
  };
  /** Gets transfers of NFTs for a given wallet address */
  NftsController_getTransferForAddress: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The wallet address of the sender or recipient of the transfers */
        walletAddress: string;
      };
      query: {
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransfersModel'];
        };
      };
    };
  };
  /** Gets transfers of an NFT by contract address and token ID. */
  NftsController_getTransfersByTokenId: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The contract address of the NFT collection */
        tokenAddress: string;
        /** The token id to get transfers for */
        tokenId: string;
      };
      query: {
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransfersModel'];
        };
      };
    };
  };
  /** Gets transfers by contract address. */
  NftsController_getTransfersByTokenAddress: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The contract address of the NFT collection */
        tokenAddress: string;
      };
      query: {
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransfersModel'];
        };
      };
    };
  };
  /** Gets NFT owners given a token address */
  NftsController_getOwnersByContract: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The contract address of the NFT collection */
        tokenAddress: string;
      };
      query: {
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['OwnersModel'];
        };
      };
    };
  };
  /** Gets NFT owners for a specific token address and a tokenId */
  NftsController_getOwnersByTokenId: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The contract address of the NFT collection */
        tokenAddress: string;
        /** The token id to get owners for */
        tokenId: string;
      };
      query: {
        /** The cursor returned in the previous response (to query the next page) */
        cursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['OwnersModel'];
        };
      };
    };
  };
  /** Get the lowest ETH based price for a scpecific token address */
  NftsController_getTradePrice: {
    parameters: {
      header: {
        /** NFT Api version */
        'X-Csi-Version'?: string;
      };
      path: {
        /** The id of the chain to query */
        chainId: string;
        /** The contract address of the NFT collection */
        tokenAddress: string;
      };
      query: {
        /** The number of days to get lowest price for (defaults to 30) */
        days?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TradePriceModel'];
        };
      };
    };
  };
}

export interface External {}
